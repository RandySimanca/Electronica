import express from 'express';
import cors from 'cors';
import { config, validateConfig } from './config/env.js';
import { requestLogger } from './middleware/logger.js';
import { errorHandler, notFoundHandler } from './middleware/errorHandler.js';
import { successResponse } from './utils/response.js';
import routes from './routes/index.js';
import initDatabase from './config/initDatabase.js';
import authRoutes from "./routes/auth.js";




// Validar configuración antes de iniciar
validateConfig();

const app = express();

// Middleware de CORS
app.use(cors({
  origin: 'http://localhost:5173', // reemplaza con la URL de tu frontend
  credentials: true
}));

// Middleware de parsing
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Middleware de logging (solo en desarrollo)
if (config.NODE_ENV === 'development') {
  app.use(requestLogger);
}

// Rutas de la API
app.use('/api', routes);

//app.use("/api/auth", authRoutes);

// Ruta de estado de la API
app.get('/', (req, res) => {
  successResponse(res, {
    name: 'Electronics Workshop API',
    version: '1.0.0',
    status: 'running',
    environment: config.NODE_ENV,
    timestamp: new Date().toISOString()
  }, 'API funcionando correctamente');
});

// Ruta de salud
app.get('/health', (req, res) => {
  successResponse(res, {
    status: 'healthy',
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    timestamp: new Date().toISOString()
  }, 'Sistema saludable');
});

// ✅ Middleware para rutas no encontradas (Express 5 compatible)
// Antes: app.all('*', notFoundHandler);
app.all(/.*/, notFoundHandler);

// Middleware global de manejo de errores
app.use(errorHandler);

// Inicializar base de datos y servidor
const startServer = async () => {
  try {
    console.log('🔧 Inicializando base de datos...');
    await initDatabase();
    
    console.log('🚀 Iniciando servidor...');
    app.listen(config.PORT, () => {
      console.log(`
┌─────────────────────────────────────────────┐
│     🔧 Electronics Workshop API             │
├─────────────────────────────────────────────┤
│ 🌟 Estado: Funcionando                      │
│ 🚀 Puerto: ${config.PORT}                            │
│ 📊 API: http://localhost:${config.PORT}/api         │
│ 🌍 Entorno: ${config.NODE_ENV}                    │
│ 📅 Iniciado: ${new Date().toLocaleString()}       │
└─────────────────────────────────────────────┘
      `);
    });
  } catch (error) {
    console.error('❌ Error al iniciar el servidor:', error);
    process.exit(1);
  }
};

// Manejo de cierre graceful
process.on('SIGTERM', () => {
  console.log('👋 Cerrando servidor...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('👋 Cerrando servidor...');
  process.exit(0);
});

startServer();
